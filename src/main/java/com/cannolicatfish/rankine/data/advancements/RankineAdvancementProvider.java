package com.cannolicatfish.rankine.data.advancements;

public class RankineAdvancementProvider {
/*
    public RankineAdvancementProvider(DataGenerator generatorIn) {
        super(generatorIn);
    }

    public String getName() {
        return "Project Rankine - Advancements";
    }

    @Override
    protected void registerAdvancements(Consumer<Advancement> consumer, ExistingFileHelper fileHelper) {
        Advancement ROOT = Advancement.Builder.advancement().display(RankineBlocks.REFRACTORY_BRICKS.getBricksBlock(), new TranslatableComponent("rankine.advancements.story.root.title"), new TranslatableComponent("rankine.advancements.story.root.description"), new ResourceLocation("rankine:textures/gui/advancements/backgrounds/refractory.png"),  FrameType.TASK, true, false, false).addCriterion("stick", InventoryChangeTrigger.TriggerInstance.hasItems(Items.STICK)).addCriterion("flint", InventoryChangeTrigger.TriggerInstance.hasItems(Items.FLINT)).addCriterion("crafting_table", InventoryChangeTrigger.TriggerInstance.hasItems(Items.CRAFTING_TABLE)).requirements(RequirementsStrategy.OR).save(consumer,"rankine:story/root");

        Advancement.Builder.advancement().parent(ROOT).display(Items.WRITABLE_BOOK, new TranslatableComponent("rankine.advancements.story.support.title"), new TranslatableComponent("rankine.advancements.story.support.description"),null,  FrameType.TASK, false, false, false).addCriterion("stick", InventoryChangeTrigger.TriggerInstance.hasItems(Items.STICK)).addCriterion("flint", InventoryChangeTrigger.TriggerInstance.hasItems(Items.FLINT)).addCriterion("crafting_table", InventoryChangeTrigger.TriggerInstance.hasItems(Items.CRAFTING_TABLE)).requirements(RequirementsStrategy.OR).save(consumer,"rankine:story/support");

        Advancement MOVEMENT = Advancement.Builder.advancement().parent(ROOT).display(Items.LEATHER_BOOTS, new TranslatableComponent("rankine.advancements.story.info_movement.title"), new TranslatableComponent("rankine.advancements.story.info_movement.description"),null,  FrameType.TASK, true, false, false).addCriterion("rope", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.ROPE.get())).save(consumer,"rankine:story/info_movement");
        Advancement TREADS = Advancement.Builder.advancement().parent(MOVEMENT).display(Items.NETHERITE_BOOTS, new TranslatableComponent("rankine.advancements.story.treads.title"), new TranslatableComponent("rankine.advancements.story.treads.description"),null,  FrameType.TASK, true, true, false).addCriterion("boots", InventoryChangeTrigger.TriggerInstance.hasItems(HasEnchantmentPredicate.Builder.item().of(RankineTags.Items.BOOTS).withEnchantments(RankineEnchantments.SPEED_SKATER.get(),RankineEnchantments.DUNE_WALKER.get(),RankineEnchantments.SNOW_DRIFTER.get(),RankineEnchantments.SWIFT_SWIMMER.get()).build())).save(consumer,"rankine:story/treads");
        Advancement SPEED_RUNNER = Advancement.Builder.advancement().parent(TREADS).display(RankineItems.ALLOY_BOOTS.get(), new TranslatableComponent("rankine.advancements.challenges.speed_runner.title"), new TranslatableComponent("rankine.advancements.challenges.speed_runner.description"),null,  FrameType.CHALLENGE, true, true, false).addCriterion("boots", InventoryChangeTrigger.TriggerInstance.hasItems(HasEnchantmentPredicate.Builder.item().of(RankineTags.Items.BOOTS).withEnchantments(RankineEnchantments.SPEED_SKATER.get(),RankineEnchantments.DUNE_WALKER.get(),RankineEnchantments.SNOW_DRIFTER.get(),RankineEnchantments.SWIFT_SWIMMER.get(), Enchantments.DEPTH_STRIDER, Enchantments.SOUL_SPEED).build())).save(consumer,"rankine:story/speed_runner");

        Advancement DOWSING_ROD = Advancement.Builder.advancement().parent(ROOT).display(RankineItems.DOWSING_ROD.get(), new TranslatableComponent("rankine.advancements.story.craft_dowsing_rod.title"), new TranslatableComponent("rankine.advancements.story.craft_dowsing_rod.description"),null,  FrameType.TASK, true, false, false).addCriterion("dowsing_rod", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.DOWSING_ROD.get())).save(consumer,"rankine:story/craft_dowsing_rod");
        Advancement GROUND_TAP = Advancement.Builder.advancement().parent(DOWSING_ROD).display(RankineItems.GROUND_TAP.get(), new TranslatableComponent("rankine.advancements.story.craft_ground_tap.title"), new TranslatableComponent("rankine.advancements.story.craft_ground_tap.description"),null,  FrameType.TASK, true, false, false).addCriterion("ground_tap", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.GROUND_TAP.get())).save(consumer,"rankine:story/craft_ground_tap");
        Advancement FLOOD_GATE = Advancement.Builder.advancement().parent(GROUND_TAP).display(RankineItems.FLOOD_GATE.get(), new TranslatableComponent("rankine.advancements.story.craft_flood_gate.title"), new TranslatableComponent("rankine.advancements.story.craft_flood_gate.description"),null,  FrameType.TASK, true, false, false).addCriterion("flood_gate", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.FLOOD_GATE.get())).save(consumer,"rankine:story/craft_flood_gate");

        Advancement HARDNESS_TESTER = Advancement.Builder.advancement().parent(ROOT).display(RankineItems.HARDNESS_TESTER.get(), new TranslatableComponent("rankine.advancements.story.craft_hardness_tester.title"), new TranslatableComponent("rankine.advancements.story.craft_hardness_tester.description"),null,  FrameType.TASK, true, false, false).addCriterion("hardness_tester", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.HARDNESS_TESTER.get())).save(consumer,"rankine:story/craft_hardness_tester");
        Advancement MATERIAL_TESTING_TABLE = Advancement.Builder.advancement().parent(HARDNESS_TESTER).display(RankineItems.MATERIAL_TESTING_TABLE.get(), new TranslatableComponent("rankine.advancements.story.craft_material_testing_table.title"), new TranslatableComponent("rankine.advancements.story.craft_material_testing_table.description"),null,  FrameType.TASK, true, false, false).addCriterion("material_testing_table", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.MATERIAL_TESTING_TABLE.get())).save(consumer,"rankine:story/craft_material_testing_table");
        Advancement BRONZE_PICKAXE = Advancement.Builder.advancement().parent(MATERIAL_TESTING_TABLE).rewards(AdvancementRewards.Builder.experience(200)).display(RankineItems.BRONZE_PICKAXE.get(), new TranslatableComponent("rankine.advancements.challenges.bronze_harvest.title"), new TranslatableComponent("rankine.advancements.challenges.bronze_harvest.description"), null,  FrameType.CHALLENGE, true, true, false).addCriterion("pickaxe", InventoryChangeTrigger.TriggerInstance.hasItems(HarvestLevelPredicate.Builder.item().withLevel(MinMaxBounds.Ints.atLeast(3)).of(RankineItems.BRONZE_PICKAXE.get()).build())).save(consumer,"rankine:challenges/bronze_harvest");
        Advancement.Builder.advancement().parent(MATERIAL_TESTING_TABLE).rewards(AdvancementRewards.Builder.experience(200)).display(RankineItems.PEWTER_SWORD.get(), new TranslatableComponent("rankine.advancements.challenges.pewter_enchant.title"), new TranslatableComponent("rankine.advancements.challenges.pewter_enchant.description"), null,  FrameType.CHALLENGE, true, true, false).addCriterion("pewter_tool", InventoryChangeTrigger.TriggerInstance.hasItems(AlloyEnchantabilityPredicate.Builder.item().withLevel(MinMaxBounds.Ints.atLeast(14)).of(RankineTags.Items.PEWTER_TOOLS).build())).save(consumer,"rankine:challenges/pewter_enchant");

        //progression related
        Advancement FLINT = Advancement.Builder.advancement().parent(ROOT).display(Items.FLINT, new TranslatableComponent("rankine.advancements.story.get_flint.title"), new TranslatableComponent("rankine.advancements.story.get_flint.description"),null,  FrameType.TASK, true, true, false).addCriterion("flint", InventoryChangeTrigger.TriggerInstance.hasItems(Items.FLINT)).save(consumer,"rankine:story/get_flint");
        Advancement ROPE = Advancement.Builder.advancement().parent(FLINT).display(RankineItems.ROPE.get(), new TranslatableComponent("rankine.advancements.story.craft_rope.title"), new TranslatableComponent("rankine.advancements.story.craft_rope.description"),null,  FrameType.TASK, true, true, false).addCriterion("rope", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.ROPE.get())).save(consumer,"rankine:story/craft_rope");
        Advancement FLINT_AXE = Advancement.Builder.advancement().parent(ROPE).display(RankineItems.FLINT_AXE.get(), new TranslatableComponent("rankine.advancements.story.craft_flint_axe.title"), new TranslatableComponent("rankine.advancements.story.craft_flint_axe.description"),null,  FrameType.TASK, true, false, false).addCriterion("flint_axe", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.FLINT_AXE.get())).addCriterion("stone_axe", InventoryChangeTrigger.TriggerInstance.hasItems(Items.STONE_AXE)).requirements(RequirementsStrategy.OR).save(consumer,"rankine:story/craft_flint_axe");
        Advancement CHARCOAL_PIT = Advancement.Builder.advancement().parent(FLINT_AXE).display(RankineItems.CHARCOAL_PIT.get(), new TranslatableComponent("rankine.advancements.story.craft_charcoal_pit.title"), new TranslatableComponent("rankine.advancements.story.craft_charcoal_pit.description"),null,  FrameType.TASK, true, true, false).addCriterion("charcoal_pit", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.CHARCOAL_PIT.get())).save(consumer,"rankine:story/craft_charcoal_pit");
        Advancement FLINT_PICKAXE = Advancement.Builder.advancement().parent(ROPE).display(RankineItems.FLINT_PICKAXE.get(), new TranslatableComponent("rankine.advancements.story.craft_flint_pickaxe.title"), new TranslatableComponent("rankine.advancements.story.craft_flint_pickaxe.description"),null,  FrameType.TASK, true, true, false).addCriterion("flint_pickaxe", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.FLINT_PICKAXE.get())).addCriterion("stone_pickaxe", InventoryChangeTrigger.TriggerInstance.hasItems(Items.STONE_PICKAXE)).requirements(RequirementsStrategy.OR).save(consumer,"rankine:story/craft_flint_pickaxe");
        andListChallenge(consumer, FLINT_PICKAXE, RankineBlocks.BLACK_DACITE.getStone(), "stone_collector", 400, RankineLists.RANKINE_STONES.stream().map(block -> (ItemLike) block.getStone()).collect(Collectors.toList()));
        Advancement MIXING_BARREL = Advancement.Builder.advancement().parent(FLINT_PICKAXE).display(RankineItems.MIXING_BARREL.get(), new TranslatableComponent("rankine.advancements.story.craft_mixing_barrel.title"), new TranslatableComponent("rankine.advancements.story.craft_mixing_barrel.description"),null,  FrameType.TASK, true, true, false).addCriterion("mixing_barrel", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.MIXING_BARREL.get())).save(consumer,"rankine:story/craft_mixing_barrel");
        Advancement SOILS = andListChallenge(consumer, MIXING_BARREL, RankineItems.HUMUS.get(), "soil_collector", 400, RankineLists.SOIL_BLOCKS.stream().map(block -> (ItemLike) block).collect(Collectors.toList()));
        Advancement BLAST_FURNACE = Advancement.Builder.advancement().parent(MIXING_BARREL).display(Items.BLAST_FURNACE, new TranslatableComponent("rankine.advancements.story.craft_blast_furnace.title"), new TranslatableComponent("rankine.advancements.story.craft_blast_furnace.description"),null,  FrameType.TASK, true, true, false).addCriterion("blast_furnace", InventoryChangeTrigger.TriggerInstance.hasItems(Items.BLAST_FURNACE)).save(consumer,"rankine:story/craft_blast_furnace");
        Advancement REFRACTORY_BRICKS = Advancement.Builder.advancement().parent(MIXING_BARREL).display(RankineBlocks.REFRACTORY_BRICKS.getBricksBlock(), new TranslatableComponent("rankine.advancements.story.craft_refractory_bricks.title"), new TranslatableComponent("rankine.advancements.story.craft_refractory_bricks.description"),null,  FrameType.TASK, true, true, false).addCriterion("refractory_bricks", InventoryChangeTrigger.TriggerInstance.hasItems(RankineBlocks.REFRACTORY_BRICKS.getBricksBlock())).save(consumer,"rankine:story/craft_refractory_bricks");
        Advancement ALLOY_FURNACE = Advancement.Builder.advancement().parent(REFRACTORY_BRICKS).display(RankineItems.ALLOY_FURNACE.get(), new TranslatableComponent("rankine.advancements.story.craft_alloy_furnace.title"), new TranslatableComponent("rankine.advancements.story.craft_alloy_furnace.description"),null,  FrameType.GOAL, true, true, false).addCriterion("alloy_furnace", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.ALLOY_FURNACE.get())).save(consumer,"rankine:story/craft_alloy_furnace");
        Advancement BATTERIES = Advancement.Builder.advancement().parent(ALLOY_FURNACE).display(RankineItems.SILVER_ZINC_BATTERY.get(), new TranslatableComponent("rankine.advancements.story.craft_battery.title"), new TranslatableComponent("rankine.advancements.story.craft_battery.description"),null,  FrameType.TASK, true, true, false).addCriterion("battery1", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.SILVER_ZINC_BATTERY.get())).addCriterion("battery2", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.ZINC_BROMINE_BATTERY.get())).addCriterion("battery3", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.LEAD_ACID_BATTERY.get())).addCriterion("battery4", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.MAGNESIUM_BATTERY.get())).addCriterion("battery5", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.SODIUM_SULFUR_BATTERY.get())).addCriterion("battery6", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.VANADIUM_REDOX_BATTERY.get())).addCriterion("battery7", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.LITHIUM_ION_BATTERY.get())).requirements(RequirementsStrategy.OR).save(consumer,"rankine:story/craft_battery");
        Advancement RTGS = andListChallenge(consumer, BATTERIES, RankineItems.CURIUM_RTG.get(), "radioactive", 300, Stream.of(RankineItems.CURIUM_RTG.get(),RankineItems.STRONTIUM_RTG.get(),RankineItems.POLONIUM_RTG.get(),RankineItems.PLUTONIUM_RTG.get(),RankineItems.AMERICIUM_RTG.get()).map(block -> (ItemLike) block).collect(Collectors.toList()));
        Advancement EVAP_TOWER = Advancement.Builder.advancement().parent(ALLOY_FURNACE).display(RankineItems.EVAPORATION_TOWER.get(), new TranslatableComponent("rankine.advancements.story.craft_evaporation_tower.title"), new TranslatableComponent("rankine.advancements.story.craft_evaporation_tower.description"),null,  FrameType.TASK, true, false, false).addCriterion("evaporation_tower", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.EVAPORATION_TOWER.get())).save(consumer,"rankine:story/craft_evaporation_tower");
        Advancement MAGNET = Advancement.Builder.advancement().parent(ALLOY_FURNACE).display(RankineItems.ALNICO_MAGNET.get(), new TranslatableComponent("rankine.advancements.story.craft_magnet.title"), new TranslatableComponent("rankine.advancements.story.craft_magnet.description"),null,  FrameType.TASK, true, true, false).addCriterion("alnico_magnet", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.ALNICO_MAGNET.get())).addCriterion("rare_earth_magnet", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.RARE_EARTH_MAGNET.get())).addCriterion("simple_magnet", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.SIMPLE_MAGNET.get())).requirements(RequirementsStrategy.OR).save(consumer,"rankine:story/craft_magnet");
        Advancement ELECTRO_MAGNET = Advancement.Builder.advancement().parent(BATTERIES).display(RankineItems.ALNICO_ELECTROMAGNET.get(), new TranslatableComponent("rankine.advancements.story.craft_electromagnet.title"), new TranslatableComponent("rankine.advancements.story.craft_electromagnet.description"),null,  FrameType.TASK, true, false, false).addCriterion("alnico_electromagnet", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.ALNICO_ELECTROMAGNET.get())).addCriterion("rare_earth_electromagnet", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.RARE_EARTH_ELECTROMAGNET.get())).addCriterion("simple_electromagnet", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.SIMPLE_ELECTROMAGNET.get())).requirements(RequirementsStrategy.OR).save(consumer,"rankine:story/craft_electromagnet");
        Advancement DIVING_ARMOR = Advancement.Builder.advancement().parent(ALLOY_FURNACE).display(RankineItems.DIVING_CHESTPLATE.get(), new TranslatableComponent("rankine.advancements.story.craft_diving_armor.title"), new TranslatableComponent("rankine.advancements.story.craft_diving_armor.description"),null,  FrameType.TASK, true, true, false).addCriterion("diving_armor", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.DIVING_HELMET.get(),RankineItems.DIVING_CHESTPLATE.get(),RankineItems.DIVING_LEGGINGS.get(),RankineItems.DIVING_BOOTS.get())).save(consumer,"rankine:story/craft_diving_armor");
        Advancement CONDUIT_ARMOR = Advancement.Builder.advancement().parent(DIVING_ARMOR).display(RankineItems.CONDUIT_DIVING_CHESTPLATE.get(), new TranslatableComponent("rankine.advancements.story.craft_conduit_diving_armor.title"), new TranslatableComponent("rankine.advancements.story.craft_conduit_diving_armor.description"),null,  FrameType.TASK, true, true, false).addCriterion("conduit_diving_armor", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.CONDUIT_DIVING_HELMET.get(),RankineItems.CONDUIT_DIVING_CHESTPLATE.get(),RankineItems.CONDUIT_DIVING_LEGGINGS.get(),RankineItems.CONDUIT_DIVING_BOOTS.get())).save(consumer,"rankine:story/craft_conduit_diving_armor");
        Advancement TEMPLATE_TABLE = Advancement.Builder.advancement().parent(ALLOY_FURNACE).display(RankineItems.TEMPLATE_TABLE.get(), new TranslatableComponent("rankine.advancements.story.craft_template_table.title"), new TranslatableComponent("rankine.advancements.story.craft_template_table.description"),null,  FrameType.TASK, true, false, false).addCriterion("template_table", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.TEMPLATE_TABLE.get())).save(consumer,"rankine:story/craft_template_table");
        Advancement GLASS_CUTTER = Advancement.Builder.advancement().parent(ALLOY_FURNACE).display(RankineItems.GLASS_CUTTER.get(), new TranslatableComponent("rankine.advancements.story.craft_glass_cutter.title"), new TranslatableComponent("rankine.advancements.story.craft_glass_cutter.description"),null,  FrameType.TASK, true, false, false).addCriterion("glass_cutter", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.GLASS_CUTTER.get())).save(consumer,"rankine:story/craft_glass_cutter");

        Advancement TREE_TAP = Advancement.Builder.advancement().parent(ROOT).display(RankineItems.TREE_TAP.get(), new TranslatableComponent("rankine.advancements.story.craft_tree_tap.title"), new TranslatableComponent("rankine.advancements.story.craft_tree_tap.description"),null,  FrameType.TASK, true, true, false).addCriterion("tree_tap", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.TREE_TAP.get())).save(consumer,"rankine:story/craft_tree_tap");
        Advancement BANDAGE = Advancement.Builder.advancement().parent(TREE_TAP).display(RankineItems.BANDAGE.get(), new TranslatableComponent("rankine.advancements.story.craft_bandage.title"), new TranslatableComponent("rankine.advancements.story.craft_bandage.description"),null,  FrameType.TASK, true, false, false).addCriterion("bandage", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.BANDAGE.get())).save(consumer,"rankine:story/craft_bandage");
        Advancement TRAMPOLINE = Advancement.Builder.advancement().parent(TREE_TAP).display(RankineItems.TRAMPOLINE.get(), new TranslatableComponent("rankine.advancements.story.craft_trampoline.title"), new TranslatableComponent("rankine.advancements.story.craft_trampoline.description"),null,  FrameType.TASK, true, true, false).addCriterion("trampoline", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.TRAMPOLINE.get())).save(consumer,"rankine:story/craft_trampoline");
        Advancement.Builder.advancement().parent(TREE_TAP).rewards(AdvancementRewards.Builder.experience(200)).display(RankineItems.PANCAKE_BREAKFAST.get(), new TranslatableComponent("rankine.advancements.challenges.craft_pancake_breakfast.title"), new TranslatableComponent("rankine.advancements.challenges.craft_pancake_breakfast.description"), null,  FrameType.CHALLENGE, true, true, false).addCriterion("pancake_breakfast", InventoryChangeTrigger.TriggerInstance.hasItems(ItemPredicate.Builder.item().of(RankineItems.PANCAKE_BREAKFAST.get()).withCount(MinMaxBounds.Ints.atLeast(64)).build())).save(consumer,"rankine:challenges/craft_pancake_breakfast");

        Advancement BEEHIVE_OVEN = Advancement.Builder.advancement().parent(REFRACTORY_BRICKS).display(RankineItems.BEEHIVE_OVEN_PIT.get(), new TranslatableComponent("rankine.advancements.story.craft_beehive_oven_pit.title"), new TranslatableComponent("rankine.advancements.story.craft_beehive_oven_pit.description"),null,  FrameType.GOAL, true, true, false).addCriterion("beehive_oven_pit", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.BEEHIVE_OVEN_PIT.get())).save(consumer,"rankine:story/craft_beehive_oven_pit");
        Advancement HIGH_REFRACTORY_BRICKS = Advancement.Builder.advancement().parent(BEEHIVE_OVEN).display(RankineBlocks.HIGH_REFRACTORY_BRICKS.getBricksBlock(), new TranslatableComponent("rankine.advancements.story.craft_high_refractory_bricks.title"), new TranslatableComponent("rankine.advancements.story.craft_high_refractory_bricks.description"),null,  FrameType.TASK, true, false, false).addCriterion("high_refractory_bricks", InventoryChangeTrigger.TriggerInstance.hasItems(RankineBlocks.HIGH_REFRACTORY_BRICKS.getBricksBlock())).save(consumer,"rankine:story/craft_high_refractory_bricks");
        Advancement ULTRA_HIGH_REFRACTORY_BRICKS = Advancement.Builder.advancement().parent(HIGH_REFRACTORY_BRICKS).display(RankineBlocks.ULTRA_HIGH_REFRACTORY_BRICKS.getBricksBlock(), new TranslatableComponent("rankine.advancements.story.craft_ultra_high_refractory_bricks.title"), new TranslatableComponent("rankine.advancements.story.craft_ultra_high_refractory_bricks.description"),null,  FrameType.TASK, true, false, false).addCriterion("ultra_high_refractory_bricks", InventoryChangeTrigger.TriggerInstance.hasItems(RankineBlocks.ULTRA_HIGH_REFRACTORY_BRICKS.getBricksBlock())).save(consumer,"rankine:story/craft_ultra_high_refractory_bricks");
        Advancement COKE = Advancement.Builder.advancement().parent(BEEHIVE_OVEN).display(RankineItems.COKE.get(), new TranslatableComponent("rankine.advancements.story.make_coke.title"), new TranslatableComponent("rankine.advancements.story.make_coke.description"),null,  FrameType.TASK, true, false, false).addCriterion("coke", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.COKE.get())).save(consumer,"rankine:story/make_coke");
        Advancement CRUCIBLE = Advancement.Builder.advancement().parent(HIGH_REFRACTORY_BRICKS).display(RankineItems.CRUCIBLE.get(), new TranslatableComponent("rankine.advancements.story.craft_crucible.title"), new TranslatableComponent("rankine.advancements.story.craft_crucible.description"),null,  FrameType.GOAL, true, true, false).addCriterion("crucible", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.CRUCIBLE.get())).save(consumer,"rankine:story/craft_crucible");
        Advancement REDSTONE = Advancement.Builder.advancement().parent(CRUCIBLE).display(Items.REDSTONE, new TranslatableComponent("rankine.advancements.story.make_redstone.title"), new TranslatableComponent("rankine.advancements.story.make_redstone.description"),null,  FrameType.TASK, true, false, false).addCriterion("redstone", InventoryChangeTrigger.TriggerInstance.hasItems(Items.REDSTONE)).save(consumer,"rankine:story/make_redstone");
        Advancement GLOWSTONE = Advancement.Builder.advancement().parent(CRUCIBLE).display(Items.GLOWSTONE_DUST, new TranslatableComponent("rankine.advancements.story.make_glowstone.title"), new TranslatableComponent("rankine.advancements.story.make_glowstone.description"),null,  FrameType.TASK, true, false, false).addCriterion("glowstone", InventoryChangeTrigger.TriggerInstance.hasItems(Items.GLOWSTONE_DUST)).save(consumer,"rankine:story/make_glowstone");
        Advancement STEEL = Advancement.Builder.advancement().parent(CRUCIBLE).display(RankineItems.STEEL_INGOT.get(), new TranslatableComponent("rankine.advancements.story.make_steel.title"), new TranslatableComponent("rankine.advancements.story.make_steel.description"),null,  FrameType.TASK, true, true, false).addCriterion("steel", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.STEEL_INGOT.get())).save(consumer,"rankine:story/make_steel");
        Advancement INDUCTION_FURNACE = Advancement.Builder.advancement().parent(STEEL).display(RankineItems.INDUCTION_FURNACE.get(), new TranslatableComponent("rankine.advancements.story.craft_induction_furnace.title"), new TranslatableComponent("rankine.advancements.story.craft_induction_furnace.description"),null,  FrameType.GOAL, true, true, false).addCriterion("induction_furnace", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.INDUCTION_FURNACE.get())).save(consumer,"rankine:story/craft_induction_furnace");
        Advancement ALLOYS = andListChallenge(consumer, INDUCTION_FURNACE, RankineItems.AMALGAM_INGOT.get(), "alloy_collector", 800, RankineLists.ALLOY_INGOTS.stream().map(block -> (ItemLike) block).collect(Collectors.toList()));
        Advancement.Builder.advancement().parent(INDUCTION_FURNACE).rewards(AdvancementRewards.Builder.experience(200)).display(RankineItems.PURPLE_GOLD_HAMMER.get(), new TranslatableComponent("rankine.advancements.challenges.colored_gold_netherite.title"), new TranslatableComponent("rankine.advancements.challenges.colored_gold_netherite.description"), null,  FrameType.CHALLENGE, true, true, false).addCriterion("netherite_gold", InventoryChangeTrigger.TriggerInstance.hasItems(IncludesCompositionPredicate.Builder.item().withComposition("Nr").of(RankineTags.Items.COLORED_GOLD_TOOLS).build())).save(consumer,"rankine:challenges/colored_gold_netherite");
        andListChallenge(consumer, ALLOYS, RankineItems.TOTEM_OF_HASTENING.get(), "totem_collector", 400, Stream.of(RankineItems.TOTEM_OF_HASTENING.get(),RankineItems.TOTEM_OF_BLAZING.get(),RankineItems.TOTEM_OF_PROMISING.get(),RankineItems.TOTEM_OF_COBBLING.get(),RankineItems.TOTEM_OF_ENDURING.get(),RankineItems.TOTEM_OF_INFUSING.get(),RankineItems.TOTEM_OF_INVIGORATING.get(),RankineItems.TOTEM_OF_LEVITATING.get(),RankineItems.TOTEM_OF_REPULSING.get(),RankineItems.TOTEM_OF_SOFTENING.get(),RankineItems.TOTEM_OF_TIMESAVING.get(),RankineItems.TOTEM_OF_POWERING.get()).map(block -> (ItemLike) block).collect(Collectors.toList()));

        Advancement FUSION_FURNACE = Advancement.Builder.advancement().parent(STEEL).display(RankineItems.FUSION_FURNACE.get(), new TranslatableComponent("rankine.advancements.story.craft_fusion_furnace.title"), new TranslatableComponent("rankine.advancements.story.craft_fusion_furnace.description"),null,  FrameType.GOAL, true, true, false).addCriterion("fusion_furnace", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.FUSION_FURNACE.get())).save(consumer,"rankine:story/craft_fusion_furnace");
        Advancement ELEMENT_INDEXER = Advancement.Builder.advancement().parent(FUSION_FURNACE).display(RankineItems.ELEMENT_INDEXER.get(), new TranslatableComponent("rankine.advancements.story.craft_element_indexer.title"), new TranslatableComponent("rankine.advancements.story.craft_element_indexer.description"),null,  FrameType.TASK, true, true, false).addCriterion("element_indexer", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.ELEMENT_INDEXER.get())).save(consumer,"rankine:story/craft_element_indexer");
        Advancement PENNING_TRAP = Advancement.Builder.advancement().parent(FUSION_FURNACE).display(RankineItems.PENNING_TRAP.get(), new TranslatableComponent("rankine.advancements.story.craft_penning_trap.title"), new TranslatableComponent("rankine.advancements.story.craft_penning_trap.description"),null,  FrameType.TASK, true, true, false).addCriterion("penning_trap", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.PENNING_TRAP.get())).save(consumer,"rankine:story/craft_penning_trap");
        Advancement SADDLE_TREE = Advancement.Builder.advancement().parent(STEEL).display(RankineItems.SADDLE_TREE.get(), new TranslatableComponent("rankine.advancements.story.craft_saddle_tree.title"), new TranslatableComponent("rankine.advancements.story.craft_saddle_tree.description"),null,  FrameType.TASK, true, false, false).addCriterion("saddle_tree", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.SADDLE_TREE.get())).save(consumer,"rankine:story/craft_saddle_tree");
        Advancement BRIGADINE_ARMOR = Advancement.Builder.advancement().parent(STEEL).display(RankineItems.BRIGADINE_CHESTPLATE.get(), new TranslatableComponent("rankine.advancements.story.craft_brigandine_armor.title"), new TranslatableComponent("rankine.advancements.story.craft_brigandine_armor.description"),null,  FrameType.TASK, true, true, false).addCriterion("brigandine_armor", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.BRIGADINE_HELMET.get(),RankineItems.BRIGADINE_CHESTPLATE.get(),RankineItems.BRIGADINE_LEGGINGS.get(),RankineItems.BRIGADINE_BOOTS.get())).save(consumer,"rankine:story/craft_brigandine_armor");
        andListChallenge(consumer, PENNING_TRAP, RankineItems.ELEMENT.get(), "element_collector", 1000, Stream.concat(RankineLists.ELEMENT_INGOTS.stream(), Stream.of(Items.IRON_INGOT, Items.COPPER_INGOT, Items.GOLD_INGOT, Items.NETHERITE_INGOT)).map(block -> (ItemLike) block).collect(Collectors.toList()));

        Advancement GAS_MASK = Advancement.Builder.advancement().parent(ROOT).display(RankineItems.GAS_MASK.get(), new TranslatableComponent("rankine.advancements.story.craft_gas_mask.title"), new TranslatableComponent("rankine.advancements.story.craft_gas_mask.description"),null,  FrameType.TASK, true, false, false).addCriterion("gas_mask", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.GAS_MASK.get())).save(consumer,"rankine:story/craft_gas_mask");
        Advancement SHULKER_GAS_VACUUM = Advancement.Builder.advancement().parent(GAS_MASK).display(RankineItems.SHULKER_GAS_VACUUM.get(), new TranslatableComponent("rankine.advancements.story.craft_shulker_gas_vacuum.title"), new TranslatableComponent("rankine.advancements.story.craft_shulker_gas_vacuum.description"),null,  FrameType.TASK, true, true, false).addCriterion("shulker_gas_vacuum", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.SHULKER_GAS_VACUUM.get())).save(consumer,"rankine:story/craft_shulker_gas_vacuum");
        Advancement DISTILLATION_TOWER = Advancement.Builder.advancement().parent(SHULKER_GAS_VACUUM).display(RankineItems.DISTILLATION_TOWER.get(), new TranslatableComponent("rankine.advancements.story.craft_distillation_tower.title"), new TranslatableComponent("rankine.advancements.story.craft_distillation_tower.description"),null,  FrameType.TASK, true, true, false).addCriterion("distillation_tower", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.DISTILLATION_TOWER.get())).save(consumer,"rankine:story/craft_distillation_tower");
        Advancement GASSES = andListChallenge(consumer, DISTILLATION_TOWER, RankineItems.HYDROGEN_SULFIDE_GAS_BOTTLE.get(), "gas_collector", 700, RankineLists.GAS_BOTTLES.stream().map(block -> (ItemLike) block).collect(Collectors.toList()));

        Advancement PROSPECTING_STICK = Advancement.Builder.advancement().parent(FLINT_PICKAXE).display(RankineItems.PROSPECTING_STICK.get(), new TranslatableComponent("rankine.advancements.story.craft_prospecting_stick.title"), new TranslatableComponent("rankine.advancements.story.craft_prospecting_stick.description"),null,  FrameType.TASK, true, true, false).addCriterion("prospecting_stick", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.PROSPECTING_STICK.get())).save(consumer,"rankine:story/craft_prospecting_stick");
        Advancement ROCK_DRILL = Advancement.Builder.advancement().parent(PROSPECTING_STICK).display(RankineItems.ROCK_DRILL.get(), new TranslatableComponent("rankine.advancements.story.craft_rock_drill.title"), new TranslatableComponent("rankine.advancements.story.craft_rock_drill.description"),null,  FrameType.TASK, true, false, false).addCriterion("rock_drill", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.ROCK_DRILL.get())).save(consumer,"rankine:story/craft_rock_drill");
        Advancement ORE_DETECTOR = Advancement.Builder.advancement().parent(PROSPECTING_STICK).display(RankineItems.ORE_DETECTOR.get(), new TranslatableComponent("rankine.advancements.story.craft_ore_detector.title"), new TranslatableComponent("rankine.advancements.story.craft_ore_detector.description"),null,  FrameType.TASK, true, false, false).addCriterion("ore_detector", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.ORE_DETECTOR.get())).save(consumer,"rankine:story/craft_ore_detector");

        Advancement WOODEN_GOLD_PAN = Advancement.Builder.advancement().parent(ROOT).display(RankineItems.WOODEN_GOLD_PAN.get(), new TranslatableComponent("rankine.advancements.story.craft_wooden_gold_pan.title"), new TranslatableComponent("rankine.advancements.story.craft_wooden_gold_pan.description"),null,  FrameType.TASK, true, false, false).addCriterion("wooden_gold_pan", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.WOODEN_GOLD_PAN.get())).save(consumer,"rankine:story/craft_wooden_gold_pan");
        Advancement STEEL_GOLD_PAN = Advancement.Builder.advancement().parent(WOODEN_GOLD_PAN).display(RankineItems.STEEL_GOLD_PAN.get(), new TranslatableComponent("rankine.advancements.story.craft_steel_gold_pan.title"), new TranslatableComponent("rankine.advancements.story.craft_steel_gold_pan.description"),null,  FrameType.TASK, true, false, false).addCriterion("steel_gold_pan", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.STEEL_GOLD_PAN.get())).save(consumer,"rankine:story/craft_steel_gold_pan");

        Advancement WOODEN_HAMMER = Advancement.Builder.advancement().parent(ROOT).display(RankineItems.WOODEN_HAMMER.get(), new TranslatableComponent("rankine.advancements.story.craft_wooden_hammer.title"), new TranslatableComponent("rankine.advancements.story.craft_wooden_hammer.description"),null,  FrameType.TASK, true, false, false).addCriterion("wooden_hammer", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.WOODEN_HAMMER.get())).save(consumer,"rankine:story/craft_wooden_hammer");
        Advancement COBBLESTONE = Advancement.Builder.advancement().parent(WOODEN_HAMMER).display(Items.COBBLESTONE, new TranslatableComponent("rankine.advancements.story.get_cobblestone.title"), new TranslatableComponent("rankine.advancements.story.get_cobblestone.description"),null,  FrameType.TASK, true, false, false).addCriterion("cobblestone", InventoryChangeTrigger.TriggerInstance.hasItems(Items.COBBLESTONE)).save(consumer,"rankine:story/get_cobblestone");
        Advancement STONE_HAMMER = Advancement.Builder.advancement().parent(WOODEN_HAMMER).display(RankineItems.STONE_HAMMER.get(), new TranslatableComponent("rankine.advancements.story.craft_stone_hammer.title"), new TranslatableComponent("rankine.advancements.story.craft_stone_hammer.description"),null,  FrameType.TASK, true, false, false).addCriterion("stone_hammer", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.STONE_HAMMER.get())).save(consumer,"rankine:story/craft_stone_hammer");
        Advancement BANDED_IRON = Advancement.Builder.advancement().parent(STONE_HAMMER).display(RankineItems.BANDED_IRON_FORMATION.get(), new TranslatableComponent("rankine.advancements.story.get_banded_iron_formation.title"), new TranslatableComponent("rankine.advancements.story.get_banded_iron_formation.description"),null,  FrameType.TASK, true, false, false).addCriterion("banded_iron_formation", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.BANDED_IRON_FORMATION.get())).save(consumer,"rankine:story/get_banded_iron_formation");
        Advancement BOG_IRON = Advancement.Builder.advancement().parent(STONE_HAMMER).display(RankineItems.BOG_IRON.get(), new TranslatableComponent("rankine.advancements.story.get_bog_iron.title"), new TranslatableComponent("rankine.advancements.story.get_bog_iron.description"),null,  FrameType.TASK, true, false, false).addCriterion("bog_iron", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.BOG_IRON.get())).save(consumer,"rankine:story/get_bog_iron");
        Advancement IRONSTONE = Advancement.Builder.advancement().parent(STONE_HAMMER).display(RankineItems.IRONSTONE.get(), new TranslatableComponent("rankine.advancements.story.get_ironstone.title"), new TranslatableComponent("rankine.advancements.story.get_ironstone.description"),null,  FrameType.TASK, true, false, false).addCriterion("ironstone", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.IRONSTONE.get())).save(consumer,"rankine:story/get_ironstone");
        Advancement LEVEL_2_HAMMER = Advancement.Builder.advancement().parent(STONE_HAMMER).display(RankineItems.ALLOY_HAMMER.get(), new TranslatableComponent("rankine.advancements.story.craft_alloy_hammer.title"), new TranslatableComponent("rankine.advancements.story.craft_alloy_hammer.description"),null,  FrameType.GOAL, true, true, false).addCriterion("hammer", InventoryChangeTrigger.TriggerInstance.hasItems(HarvestLevelPredicate.Builder.item().withLevel(MinMaxBounds.Ints.atLeast(2)).of(RankineTags.Items.HAMMERS).build())).save(consumer,"rankine:story/craft_alloy_hammer");
        andListChallenge(consumer, LEVEL_2_HAMMER, RankineItems.TOURMALINE_GEODE.get(), "geode_collector", 300, RankineLists.GEODES.stream().map(block -> (ItemLike) block).collect(Collectors.toList()));
        orList(consumer, LEVEL_2_HAMMER, RankineItems.IRON_TIER_CRUSHING_HEAD.get(), "crushing_heads", RankineLists.CRUSHING_HEADS.stream().map(block -> (ItemLike) block).collect(Collectors.toList()));
        Advancement HEMATITE = Advancement.Builder.advancement().parent(LEVEL_2_HAMMER).display(RankineItems.HEMATITE.get(), new TranslatableComponent("rankine.advancements.story.get_hematite.title"), new TranslatableComponent("rankine.advancements.story.get_hematite.description"),null,  FrameType.TASK, true, true, false).addCriterion("hematite", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.HEMATITE.get())).save(consumer,"rankine:story/get_hematite");
        Advancement METEORIC_IRON = Advancement.Builder.advancement().parent(LEVEL_2_HAMMER).display(RankineItems.METEORIC_IRON.get(), new TranslatableComponent("rankine.advancements.story.get_meteoric_iron.title"), new TranslatableComponent("rankine.advancements.story.get_meteoric_iron.description"),null,  FrameType.TASK, true, true, false).addCriterion("meteoric_iron", InventoryChangeTrigger.TriggerInstance.hasItems(RankineItems.METEORIC_IRON.get())).save(consumer,"rankine:story/get_meteoric_iron");
        Advancement METEORIC = andListChallenge(consumer, METEORIC_IRON, RankineItems.LONSDALEITE_DIAMOND.get(), "meteoric_materials", 300, Stream.of(RankineItems.KAMACITE.get(),RankineItems.ANTITAENITE.get(),RankineItems.TAENITE.get(),RankineItems.TETRATAENITE.get(),RankineItems.LONSDALEITE_ORE.get()).map(block -> (ItemLike) block).collect(Collectors.toList()));

    }

    private Advancement orList(Consumer<Advancement> consumer, Advancement parent, ItemLike displayItem, String text, List<ItemLike> itemList) {
        Advancement.Builder temp = Advancement.Builder.advancement().parent(parent).display(displayItem, new TranslatableComponent("rankine.advancements.story."+text+".title"), new TranslatableComponent("rankine.advancements.story."+text+".description"),null,  FrameType.TASK, true, true, false);
        for (ItemLike item : itemList) {
            temp.addCriterion(item.asItem().getRegistryName().getPath(), InventoryChangeTrigger.TriggerInstance.hasItems(item));
        }
        return temp.requirements(RequirementsStrategy.OR).save(consumer,"rankine:story/"+text);
    }
    private Advancement andList(Consumer<Advancement> consumer, Advancement parent, ItemLike displayItem, String text, List<ItemLike> itemList) {
        Advancement.Builder temp = Advancement.Builder.advancement().parent(parent).display(displayItem, new TranslatableComponent("rankine.advancements.story."+text+".title"), new TranslatableComponent("rankine.advancements.story."+text+".description"),null,  FrameType.TASK, true, true, false);
        for (ItemLike item : itemList) {
            temp.addCriterion(item.asItem().getRegistryName().getPath(), InventoryChangeTrigger.TriggerInstance.hasItems(item));
        }
        return temp.requirements(RequirementsStrategy.AND).save(consumer,"rankine:story/"+text);
    }
    private Advancement andListChallenge(Consumer<Advancement> consumer, Advancement parent, ItemLike displayItem, String text, int XP, List<ItemLike> itemList) {
        Advancement.Builder temp = Advancement.Builder.advancement().parent(parent).display(displayItem, new TranslatableComponent("rankine.advancements.challenges."+text+".title"), new TranslatableComponent("rankine.advancements.challenges."+text+".description"),null,  FrameType.CHALLENGE, true, true, false);
        for (ItemLike item : itemList) {
            temp.addCriterion(item.asItem().getRegistryName().getPath(), InventoryChangeTrigger.TriggerInstance.hasItems(item));
        }
        return temp.requirements(RequirementsStrategy.AND).rewards(AdvancementRewards.Builder.experience(XP)).save(consumer,"rankine:challenges/"+text);
    }
*/
}